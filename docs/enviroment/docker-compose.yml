##services:
##  redis:
##    image: redis
##    ports:
##      - 6379:6379
##    container_name: redis
##    restart: always
##    networks:
##      - lottery-network
#
#
##version: '3.8'
#
services:


#  backend:
#    image: rayluo1/backend:1.0
#    container_name: backend
#    ports:
#      - "9191:9191"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/market?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: 690501LJK
#      SPRING_REDIS_HOST: redis
#    depends_on:
#      - mysql
#      - redis
#    networks:
#      - lottery-network
#
#  front:
#    image: rayluo1/front:1.0
#    container_name: front
#    ports:
#      - "8080:80"
#    restart: always
#    networks:
#      - lottery-network


  # Redis 服务
  redis:
    image: redis  # 官方镜像，轻量级Alpine版本
    container_name: lottery-redis
    restart: always  # 容器意外退出时自动重启
    ports:
      - "6379:6379"  # 端口映射：宿主机端口:容器端口
#    volumes:
#      - redis_data:/data  # 持久化数据卷
    networks:
      - lottery-network  # 自定义网络

  # Redis 可视化管理工具
  redis-commander:
    image: rediscommander/redis-commander
    container_name: redis-commander
    restart: always
    ports:
      - "8081:8081"  # Web访问端口
    environment:
      - REDIS_HOSTS=local:redis:6379  # 自动连接Redis容器
    depends_on:
      - redis  # 确保Redis先启动
    networks:
      - lottery-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # 5672端口是RabbitMQ的默认端口，用于客户端连接
      - "15672:15672" # 15672端口是RabbitMQ的Web管理端口，用于Web管理
    networks:
      - lottery-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ../mysql/market4.sql:/docker-entrypoint-initdb.d/market4.sql  # 挂载 SQL 脚本到容器初始化目录
    networks:
      - lottery-network

volumes:
#  mysql_data:
  redis_data:

# 自定义网络（提升容器间通信效率）
networks:
  lottery-network:
    driver: bridge

# 数据卷声明（避免Redis数据丢失）
#volumes:
#  redis_data:
